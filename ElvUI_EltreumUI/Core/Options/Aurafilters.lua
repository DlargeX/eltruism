local E, _, _, P = unpack(ElvUI)
local L = E.Libs.ACL:GetLocale('ElvUI', E.global.general.locale)
local _G = _G

-- Eltruism aura filter options
function ElvUI_EltreumUI:AurafilterOptions()
	ElvUI_EltreumUI.Options.args.aurafilters = E.Libs.ACH:Group(E:TextGradient(L["Aura Filters"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Choose to show all debuffs/buffs or use default Filters"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.aurafilters.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\aurafilter'
	ElvUI_EltreumUI.Options.args.aurafilters.args.general = E.Libs.ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.description1 = E.Libs.ACH:Description(L["Apply To All"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.minimal = E.Libs.ACH:Execute(L["All"], nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.eltruism = E.Libs.ACH:Execute("Eltruism", nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.all = E.Libs.ACH:Execute(L["Minimal"], nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player = E.Libs.ACH:Group(L["Player"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player = E.Libs.ACH:Group(L["Select how auras will be displayed for Player"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.allbuffs = E.Libs.ACH:Execute(L["All Player Buffs"], L["Set filters to show more buffs on Player"], 2, function() ElvUI_EltreumUI:SetupBuffs('player', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.alldebuffs = E.Libs.ACH:Execute(L["All Player Debuffs"], L["Set filters to show more debuffs on Player"], 3, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Player Buffs"], L["Set filters to be Eltruism defaults on Player"], 5, function() ElvUI_EltreumUI:SetupBuffs('player', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Player Debuffs"], L["Set filters to be Eltruism defaults on Player"], 6, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('player', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target = E.Libs.ACH:Group(TARGET, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target = E.Libs.ACH:Group(L["Select how auras will be displayed for Target"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.allbuffs = E.Libs.ACH:Execute(L["All Target Buffs"], L["Set filters to show more buffs on Target"], 2, function() ElvUI_EltreumUI:SetupBuffs('target', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.alldebuffs = E.Libs.ACH:Execute(L["All Target Debuffs"], L["Set filters to show more debuffs on Target"], 3, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Target Buffs"], L["Set filters to be Eltruism defaults on Target"], 5, function() ElvUI_EltreumUI:SetupBuffs('target', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Target Debuffs"], L["Set filters to be Eltruism defaults on Target"], 6, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('target', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus = E.Libs.ACH:Group(_G.POWER_TYPE_FOCUS or "", nil, 2, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus = E.Libs.ACH:Group(L["Select how auras will be displayed for Focus"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.allbuffs = E.Libs.ACH:Execute(L["All Focus Buffs"], L["Set filters to show more buffs on Focus"], 2, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.alldebuffs = E.Libs.ACH:Execute(L["All Focus Debuffs"], L["Set filters to show more debuffs on Focus"], 3, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Focus Buffs"], L["Set filters to be Eltruism defaults on Focus"], 5, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Focus Debuffs"], L["Set filters to be Eltruism defaults on Focus"], 6, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss = E.Libs.ACH:Group(L["Boss"], nil, 2, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss = E.Libs.ACH:Group(L["Select how auras will be displayed for Boss"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.allbuffs = E.Libs.ACH:Execute(L["All Boss Buffs"], L["Set filters to show more buffs on Boss"], 2, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.alldebuffs = E.Libs.ACH:Execute(L["All Boss Debuffs"], L["Set filters to show more debuffs on Boss"], 3, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Boss Buffs"], L["Set filters to be Eltruism defaults on Boss"], 5, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Boss Debuffs"], L["Set filters to be Eltruism defaults on Boss"], 6, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate = E.Libs.ACH:Group(L["Nameplates"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate = E.Libs.ACH:Group(L["Select how auras will be displayed for Nameplates"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.allbuffs = E.Libs.ACH:Execute(L["All Nameplate Buffs"], L["Set filters to show more buffs on Nameplates"], 2, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.alldebuffs = E.Libs.ACH:Execute(L["All Nameplate Debuffs"], L["Set filters to show more debuffs on Nameplates"], 3, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Nameplate Buffs"], L["Set filters to be Eltruism defaults on Nameplates"], 5, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Nameplate Debuffs"], L["Set filters to be Eltruism defaults on Nameplates"], 6, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party = E.Libs.ACH:Group(_G.PARTY, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party = E.Libs.ACH:Group(L["Select how auras will be displayed for Party"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.allbuffs = E.Libs.ACH:Execute(L["All Party Buffs"], L["Set filters to show more buffs on Party"], 2, function() ElvUI_EltreumUI:SetupBuffs('party', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.alldebuffs = E.Libs.ACH:Execute(L["All Party Debuffs"], L["Set filters to show more debuffs on Party"], 3, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Party Buffs"], L["Set filters to be Eltruism defaults on Party"], 5, function() ElvUI_EltreumUI:SetupBuffs('party', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Party Debuffs"], L["Set filters to be Eltruism defaults on Party"], 6, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('party', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid = E.Libs.ACH:Group(_G.RAID, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid = E.Libs.ACH:Group(L["Select how auras will be displayed for Raid"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.allbuffs = E.Libs.ACH:Execute(L["All Raid Buffs"], L["Set filters to show more buffs on Raid"], 2, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.alldebuffs = E.Libs.ACH:Execute(L["All Raid Debuffs"], L["Set filters to show more debuffs on Raid"], 3, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.eltruismbuffs = E.Libs.ACH:Execute(L["Eltruism Raid Buffs"], L["Set filters to be Eltruism defaults on Raid"], 5, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.eltruismdebuffs = E.Libs.ACH:Execute(L["Eltruism Raid Debuffs"], L["Set filters to be Eltruism defaults on Raid"], 6, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description3 = E.Libs.ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.minimaldebuffs = E.Libs.ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar = E.Libs.ACH:Group(L["Aura Bars"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar = E.Libs.ACH:Group(L["Select how auras will be displayed for Aura Bars"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description1 = E.Libs.ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.alldebuffs = E.Libs.ACH:Execute(_G.ALL, nil, 3, function() ElvUI_EltreumUI:SetupDebuffs('aurabar', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description2 = E.Libs.ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.eltruismdebuffs = E.Libs.ACH:Execute("Eltruism", nil, 5, function() ElvUI_EltreumUI:SetupDebuffs('aurabar', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description3 = E.Libs.ACH:Description(nil, 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.minimalbuffs = E.Libs.ACH:Execute(L["Minimal"], nil, 7, function() ElvUI_EltreumUI:SetupBuffs('aurabar', 'Minimal') end,nil,false,'full')
end
