local E, _, _, P = unpack(ElvUI)
local L = E.Libs.ACL:GetLocale('ElvUI', E.global.general.locale)
local _G = _G
local IsAddOnLoaded = _G.C_AddOns and _G.C_AddOns.IsAddOnLoaded
local PaperDollFrame_SetLevel = _G.PaperDollFrame_SetLevel
local PaperDollFrame_UpdateStats = _G.PaperDollFrame_UpdateStats
local tostring = _G.tostring
local tonumber = _G.tonumber

-- Eltruism skins options
function ElvUI_EltreumUI:SkinsOptions()
	ElvUI_EltreumUI.Options.args.skins = E.Libs.ACH:Group(E:TextGradient(L["Skins"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add several skins to World of Warcraft, such as Quests, Character Frame, Shadows, other Addons, Role Icons and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.skins.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\paint'
	ElvUI_EltreumUI.Options.args.skins.args.general = E.Libs.ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons = E.Libs.ACH:Group(L["Role Icons"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.description1 = E.Libs.ACH:Description(L["Replace role icons with Eltruism role icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.enable = E.Libs.ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select = E.Libs.ACH:Select(" ", nil, 3, {
		["ELTRUISM"] = "Eltruism "..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\Tank',':20:20'),
		["ATWOODELVUI"] = 'ElvUI '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\Tank',':20:20'),
		["ATWOODGLOW"] = 'Glow '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\Tank',':20:20'),
		["ATWOODGRAVED"] = 'Atwood '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\Tank',':20:20'),
		["ATWOODGREY"] = 'Grey '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\Tank',':20:20'),
		["ATWOODWHITE"] = 'White '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\Tank',':20:20'),
		["RELEAF"] = 'Releaf '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\Tank',':20:20'),
		["IOS"] = 'iOS '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\Tank',':20:20'),
		["MATERIAL"] = 'Material '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\Tank',':20:20'),
		["EMOJI"] = 'Emoji '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\Tank',':20:20'),
		["ICONIC"] = 'Iconic '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\Tank',':20:20'),
		["SIMPLE"] = 'Simple '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\Tank',':20:20'),
		["RPG"] = 'RPG '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\Tank',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.roleiconstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.roleiconstype = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select.sorting = {
		"ELTRUISM",
		"ATWOODELVUI",
		"ATWOODGLOW",
		"ATWOODGRAVED",
		"ATWOODGREY",
		"ATWOODWHITE",
		"RELEAF",
		"IOS",
		"MATERIAL",
		"EMOJI",
		"ICONIC",
		"SIMPLE",
		"RPG",
		"CUSTOM"
	}
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom = E.Libs.ACH:Group(L["Name of file inside Interface\\Addons"],nil,4)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.tank = E.Libs.ACH:Input(L["Tank"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomtank end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomtank = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.dps = E.Libs.ACH:Input(L["DPS"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomdps end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomdps = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.healer = E.Libs.ACH:Input(L["Healer"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomhealer end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomhealer = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.disabledps = E.Libs.ACH:Toggle(L["Disable DPS Icons"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconsdisabledps end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconsdisabledps = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard = E.Libs.ACH:Group(L["Blizzard"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description1 = E.Libs.ACH:Description(L["Make more texts use ElvUI font settings"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.zonetext = E.Libs.ACH:Toggle(L["Enable for Zones, Mail and others"], L["Such as the Zones, Mail and others"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.zones end, function(_, value) E.db.ElvUI_EltreumUI.skins.zones = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description2 = E.Libs.ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bossbannerscale = E.Libs.ACH:Range(L["Boss Banner Frame Scale"], nil, 8, { min = 0.2, max = 3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.bossScale end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.bossScale = tonumber(value) if _G.RaidBossEmoteFrame then _G.RaidBossEmoteFrame:SetScale(value) end end, function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description3 = E.Libs.ACH:Description(L["Hide Blizzard Frames"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideerror = E.Libs.ACH:Toggle(L["Hide Error Frame"], L["Hide the Red Error Text"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideerrorframe end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideerrorframe = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hidezone = E.Libs.ACH:Toggle(L["Hide Zone Text"], L["Hide the text that appears when changing zones"], 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hidezone end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hidezone = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hidealert = E.Libs.ACH:Toggle(L["Hide Alert Frame"], L["Hide the Alert Frame that appears when looting a rare item or earning an achievement"], 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hidealert end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hidealert = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideboss = E.Libs.ACH:Toggle(L["Hide Boss Banner Frame"], L["Hide the boss banner that appears when killing a raid boss or completing a Mythic+ dungeon"], 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss = value E:StaticPopup_Show('CONFIG_RL') end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideeventoaster = E.Libs.ACH:Toggle(L["Hide Event Toaster Frame"], L["Hide the toaster frame, such as when you level up"], 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideeventoaster end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideeventoaster = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description4 = E.Libs.ACH:Description(L["Skin Level Up, Boss Loot and Instance Entrance frames to be class colored"], 14, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.skinlevelbossinstance = E.Libs.ACH:Toggle(L["Enable"], L["Enable the Skins"], 15, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.levelbossinstance end, function(_, value) E.db.ElvUI_EltreumUI.skins.levelbossinstance = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description5 = E.Libs.ACH:Description(L["Remove Blizzard's Boss Emote Frame"], 16, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bossemotehide = E.Libs.ACH:Toggle(L["Enable"], L["Enable removing the Alert Frame that can show up in the middle of the screen"], 17, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bossemote end, function(_, value) E.db.ElvUI_EltreumUI.skins.bossemote = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description6 = E.Libs.ACH:Description(L["Expand Transmog Window to better show your character"], 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not (E.Retail or E.Mists))
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.widetransmog = E.Libs.ACH:Toggle(L["Enable"], L["Enable the Wider Transmog Window"], 19, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.widertransmog end, function(_, value) E.db.ElvUI_EltreumUI.skins.widertransmog = value E:StaticPopup_Show('CONFIG_RL') end, nil, not (E.Retail or E.Mists))
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description7 = E.Libs.ACH:Description(L["Skin Profession Frame"], 20, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.professionskin = E.Libs.ACH:Toggle(L["Skin the Profession/Tradeskill Frame"], nil, 21, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.professions end, function(_, value) E.db.ElvUI_EltreumUI.skins.professions = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.professionscale = E.Libs.ACH:Range(L["Scale"], nil, 22, { min = 0.2, max = 1.3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.professionscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.professionscale = value if _G.ProfessionsFrame then _G.ProfessionsFrame:SetScale(value) end end, function() return not E.db.ElvUI_EltreumUI.skins.professions end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description8 = E.Libs.ACH:Description(L["Expand the Talents to show the entire tree"], 23, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail or E.Mists)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.classictalentenable = E.Libs.ACH:Toggle(L["Expanded Talents"], L["Expand Talents to cover the full tree"], 24, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.tbctalents end, function(_, value) E.db.ElvUI_EltreumUI.skins.tbctalents = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail or E.Mists)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.classictalentscale = E.Libs.ACH:Range(L["Scale"], nil, 25, { min = 0.1, max = 2, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedtalentscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedtalentscale = value _G.PlayerTalentFrame:SetScale(value) end, function() return not E.db.ElvUI_EltreumUI.skins.tbctalents end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description9 = E.Libs.ACH:Description(L["TALENTS"], 26, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.retailtalentscale = E.Libs.ACH:Range(L["Scale"], nil, 27, { min = 0.1, max = 1.3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedtalentscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedtalentscale = value if _G.PlayerSpellsFrame then _G.PlayerSpellsFrame:SetScale(value) end end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description10 = E.Libs.ACH:Description(L["Bags"], 28, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bagscale = E.Libs.ACH:Range(L["Scale"], nil, 29, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bagscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bagscale = value if _G["ElvUI_ContainerFrame"] then _G["ElvUI_ContainerFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description11 = E.Libs.ACH:Description(L["Bank"], 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bankscale = E.Libs.ACH:Range(L["Scale"], nil, 31, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bankscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bankscale = value if _G["ElvUI_BankContainerFrame"] then _G["ElvUI_BankContainerFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description12 = E.Libs.ACH:Description(_G.LOOT, 32, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.lootscale = E.Libs.ACH:Range(L["Scale"], nil, 33, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.lootscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.lootscale = value if _G["ElvLootFrame"] then _G["ElvLootFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description13 = E.Libs.ACH:Description(_G.EXHAUSTION_LABEL.. ", ".._G.BREATH_LABEL, 34, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrorscale = E.Libs.ACH:Range(L["Scale"], nil, 35, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrorscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrorscale = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrorx = E.Libs.ACH:Range(L["Width"], nil, 36, { min = 20, max = 600, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrorx end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrorx = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrory = E.Libs.ACH:Range(L["Height"], nil, 36, { min = 10, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrory end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrory = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc = E.Libs.ACH:Group(L["Misc"], nil, 3, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description1 = E.Libs.ACH:Description(L["Add a Level Up toast"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.levelup = E.Libs.ACH:Toggle(L["Enable"], L["Enable a toast showing up when you level up"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.levelbossinstance end, function(_, value) E.db.ElvUI_EltreumUI.skins.levelbossinstance = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description2 = E.Libs.ACH:Description(L["Expand Hunter Stables to show all pets and improve search"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Mists)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.expandedstable = E.Libs.ACH:Toggle(L["Enable"], L["Enable the Expanded Stable"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedstable end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedstable = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Mists)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description3 = E.Libs.ACH:Description(L["Hide Actionbar Button Press"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.hidekeypress = E.Libs.ACH:Toggle(L["Enable"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.hideABkeypress end, function(_, value) E.db.ElvUI_EltreumUI.skins.hideABkeypress = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description4 = E.Libs.ACH:Description(L["Color Modifier Keys"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.colormodkeys = E.Libs.ACH:Toggle(L["Enable"], L["Add Class Color to Modifier Keys like ALT and CTRL on the ActionBars"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.colormodkey end, function(_, value) E.db.ElvUI_EltreumUI.skins.colormodkey = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description5 = E.Libs.ACH:Description(L["Class Colored Cooldowns"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.cdclasscolor = E.Libs.ACH:Toggle(L["Enable"], L["Sets Cooldowns to be Class Colored"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classcolorcooldowns end, function(_, value) E.db.ElvUI_EltreumUI.skins.classcolorcooldowns = value ElvUI_EltreumUI:CooldownColors() end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons = E.Libs.ACH:Group(L["Leader Icons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.description1 = E.Libs.ACH:Description(L["Replace Leader icons with Eltruism leader icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.enable = E.Libs.ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.select = E.Libs.ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.leadericonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.leadericonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom = E.Libs.ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom.args.input = E.Libs.ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons or E.db.ElvUI_EltreumUI.otherstuff.leadericonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons = E.Libs.ACH:Group(L["Assist Icons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.description1 = E.Libs.ACH:Description(L["Replace Raid Assist icons with Eltruism Raid Assist icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.enable = E.Libs.ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.select = E.Libs.ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.assisticonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.assisticonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom = E.Libs.ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom.args.input = E.Libs.ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons or E.db.ElvUI_EltreumUI.otherstuff.assisticonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons = E.Libs.ACH:Group(L["Master Looter Icons"], nil, 4, "tab", nil, nil, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.description1 = E.Libs.ACH:Description(L["Replace Master Looter icons with Eltruism Master Looter icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.enable = E.Libs.ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.select = E.Libs.ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.lootericonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.lootericonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom = E.Libs.ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom.args.input = E.Libs.ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons or E.db.ElvUI_EltreumUI.otherstuff.lootericonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.character = E.Libs.ACH:Group(L["Character"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel = E.Libs.ACH:Group(L["Panel"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons = E.Libs.ACH:Group(L["Class Icons"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.description1 = E.Libs.ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.enable = E.Libs.ACH:Toggle(L["Add Class Icons to Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel end, function(_, value) E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.styles = E.Libs.ACH:Select(L["Style"], nil, 5, {
		["RELEAF"] = "Releaf "..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanReleaf',':20:20'),
		["BLIZZARD"] = 'Blizzard '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman',':20:20'),
		["BORDER"] = 'Border '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanIconReleaf',':20:20'),
		["SHADOW"] = 'Shadow '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanShadow',':20:20'),
		["OUTLINE"] = 'Outline '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman1',':20:20'),
		["ORIGINAL"] = 'Original '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanOriginal',':20:20'),
		["GRADIENT"] = 'Gradient '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanGradient',':20:20'),
		["BW"] = 'Grey '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanBW',':20:20'),
		["UGG"] = 'U.GG '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGG',':20:20'),
		["UGGGREY"] = 'U.GG Grey'..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGGBW',':20:20'),
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.classiconsstyle end, function(_, value) E.db.ElvUI_EltreumUI.skins.classiconsstyle = value end, function() return not E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.styles.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets = E.Libs.ACH:Group(L["Sockets/Enchants/Ilvl"], nil, 1, "tab", nil, nil, nil, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description1 = E.Libs.ACH:Description(L["Sockets and Enchants"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enable = E.Libs.ACH:Toggle(L["Add Sockets and Enchants to the Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.sockets end, function(_, value) E.db.ElvUI_EltreumUI.skins.sockets = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableinspect = E.Libs.ACH:Toggle(L["Add Sockets and Enchants to the Inspect Frame"], L["Enable this option"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.socketsinspect end, function(_, value) E.db.ElvUI_EltreumUI.skins.socketsinspect = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.sockets end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description2 = E.Libs.ACH:Description(L["Item Levels"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableilvl = E.Libs.ACH:Toggle(L["Add Item Levels to the Character Panel"], L["Enable this option"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvls end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvls = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableinspectilvl = E.Libs.ACH:Toggle(L["Add Item Levels to the Inspect Panel"], L["Enable this option"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlsinspect end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlsinspect = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description3 = E.Libs.ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlanchor = E.Libs.ACH:Select(L["Ilvl Anchor Point"], L["Choose where the Ilvl will be attach to on the items"], 8, {
		["CENTER"] = "Center",
		["LEFT"] = 'Left',
		["RIGHT"] = 'Right',
		["TOP"] = 'Top',
		["TOPLEFT"] = 'Top Left',
		["TOPRIGHT"] = 'Top Right',
		["BOTTOM"] = 'Bottom',
		["BOTTOMLEFT"] = 'Bottom Left',
		["BOTTOMRIGHT"] = 'Bottom Right',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchor end, function(_,value) E.db.ElvUI_EltreumUI.skins.ilvlanchor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlanchor.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontx = E.Libs.ACH:Range(L["Ilvl Font X Offset"], nil, 9, { min = -100, max = 100, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchorx end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlanchorx = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfonty = E.Libs.ACH:Range(L["Ilvl Font Y Offset"], nil, 9, { min = -100, max = 100, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchory end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlanchory = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description4 = E.Libs.ACH:Description(" ", 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontoutline = E.Libs.ACH:Select(L["Ilvl Font Outline"], L["Choose the Ilvl font outline"], 11, { ["OUTLINE"] = "Outline", ["THICKOUTLINE"] = 'Thick Outline', ["MONOCHROME"] = 'Monochrome', }, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlfontweight end, function(_,value) E.db.ElvUI_EltreumUI.skins.ilvlfontweight = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description5 = E.Libs.ACH:Description(" ", 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontsize = E.Libs.ACH:Range(L["Ilvl Font Size"], L["Change the Ilvl font size"], 13, { min = 4, max = 72, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlfontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlfontsize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory = E.Libs.ACH:Group(L["Armory"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description1 = E.Libs.ACH:Description(L["Character Panel"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.expandart = E.Libs.ACH:Toggle(L["Expand Character Art"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorybg end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorybg = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.classicarmory = E.Libs.ACH:Toggle(L["Expand Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmory end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmory = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.classicarmoryeltruismstats = E.Libs.ACH:Toggle(L["Add Other Stats"], L["Display stats such as Speed and Mana Regen"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmoryeltruismstats end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmoryeltruismstats = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.adjustitemlevelpoint = E.Libs.ACH:Toggle(L["Adjust Position of Item Level Text"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextchangepoint end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextchangepoint = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Mists)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrest = E.Libs.ACH:Toggle(L["Add Crest to Character Panel"], L["Enable this option"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorycrest end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorycrest = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrestversion = E.Libs.ACH:Select("", nil, 5, {
		[1] = L["Version 1"],
		[2] = L["Version 2"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.armorycrestversion end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorycrestversion = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorycrest end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrestversion.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bgalpha = E.Libs.ACH:Range(L["Art Alpha"], L["Change the transparency of the Art"], 6, { min = 0.01, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorybgalpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorybgalpha = value if _G["EltruismCharacterBG"] then _G["EltruismCharacterBG"]:SetAlpha(value) end end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect = E.Libs.ACH:Select(L["Background Texture Type"], L["Choose between a Class, Race or Custom Background"], 7, {
		["CLASS"] = _G.CLASS,
		["RACE"] = _G.RACE,
		["RAGNAROS"] = L["Ragnaros"],
		["SPACECLOUD"] = L["SpaceCloud"],
		["RAVNYR"] = L["Ravnyr"],
		["BLACK"] = L["Black"],
		["CUSTOM"] = _G.CUSTOM,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.armorybgtype end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorybgtype = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect.sorting = { "CLASS", "RACE", "RAGNAROS", "SPACECLOUD", "RAVNYR", "BLACK", "CUSTOM" }
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureinput = E.Libs.ACH:Input(L["Name of file inside Interface\\Addons"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 8, nil, "full", function() return E.private.ElvUI_EltreumUI.skins.armorybgtexture end, function(_, value) E.private.ElvUI_EltreumUI.skins.armorybgtexture = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return E.db.ElvUI_EltreumUI.skins.armorybgtype ~= "CUSTOM" end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armoryvignette = E.Libs.ACH:Toggle(L["Add a Vignette over the Character Art"], L["Enable this option"], 9, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryvignette end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryvignette = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armoryvignettealpha = E.Libs.ACH:Range(L["Vignette Alpha"], L["Change the transparency of the Vignette"], 10, { min = 0.01, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryvignettealpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryvignettealpha = value _G["EltruismCharacterBGVignette"]:SetAlpha(value) end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg or not E.db.ElvUI_EltreumUI.skins.armoryvignette end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description2 = E.Libs.ACH:Description(" ", 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvl = E.Libs.ACH:Toggle(L["Enable Comparing Equipped and Bag Ilvl"], nil, 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlenablecustomcolor = E.Libs.ACH:Toggle(L["Enable Custom Colors"], nil, 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolorbad = E.Libs.ACH:Color(L["Bad Color"], nil, 14, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolormedium = E.Libs.ACH:Color(L["Medium Color"], nil, 15, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolorgood = E.Libs.ACH:Color(L["Good Color"], nil, 16, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description3 = E.Libs.ACH:Description(" ", 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.scale = E.Libs.ACH:Range(L["Character Panel Scale"], L["Change the size of the Character Panel"], 18, { min = 0.2, max = 2, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.characterpanelscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.characterpanelscale = value _G["CharacterFrame"]:SetScale(value) if _G["CharacterModelFrame"] then _G["CharacterModelFrame"]:SetIgnoreParentScale(false) else _G["CharacterModelScene"]:SetIgnoreParentScale(false) end end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.characterpanelnamefontsize = E.Libs.ACH:Range(L["Character Name Font Size"], nil, 19, { min = 8, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armorynamefontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorynamefontsize = value ElvUI_EltreumUI:ExpandedCharacterStats() PaperDollFrame_SetLevel() end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model = E.Libs.ACH:Group(L["Model"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.description1 = E.Libs.ACH:Description(L["Character Model"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamzoom = E.Libs.ACH:Range(L["Character Model Zoom"], nil, 2, { min = -2, max = 2, step = 0.01 }, "full", function() if E.Retail or E.Mists then return E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail else return E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic end end, function(_, value) if E.Retail or E.Mists then E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail = value else E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic = value end
		if E.Retail or E.Mists then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamx = E.Libs.ACH:Range(L["Character Model X Offset"], nil, 3, { min = -2, max = 2, step = 0.01 }, "full", function()
		if E.Retail or E.Mists then
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail
		else
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic
		end
	end, function(_, value)
		if E.Retail or E.Mists then
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail = value
		else
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic = value
		end

		if E.Retail or E.Mists then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamy = E.Libs.ACH:Range(L["Character Model Y Offset"], nil, 3, { min = -2, max = 2, step = 0.01 }, "full", function()
		if E.Retail or E.Mists then
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail
		else
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic
		end
	end, function(_, value)
		if E.Retail or E.Mists then
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail = value
		else
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic = value
		end

		if E.Retail or E.Mists then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality = E.Libs.ACH:Group(L["Item Quality"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.description1 = E.Libs.ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.enabletexture = E.Libs.ACH:Toggle(L["Add Item Quality Texture"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.itemquality end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemquality = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.colorsetsdifferently = E.Libs.ACH:Toggle(L["Add Item Set Colors"], L["Enable this option"], 3, nil, false, "double", function() return E.db.ElvUI_EltreumUI.skins.itemsetenable end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemsetenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.itemquality end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.itemsetcustomcolorenable = E.Libs.ACH:Toggle(L["Enable Custom Set Colors"], nil, 4, nil, false, "double", function() return E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.itemsetenable or not E.db.ElvUI_EltreumUI.skins.itemquality end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.itemsetcustomcolor = E.Libs.ACH:Color(L["Color"], nil, 5, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.itemsetcolor.r local dg = P.ElvUI_EltreumUI.skins.itemsetcolor.g local db = P.ElvUI_EltreumUI.skins.itemsetcolor.b return E.db.ElvUI_EltreumUI.skins.itemsetcolor.r, E.db.ElvUI_EltreumUI.skins.itemsetcolor.g, E.db.ElvUI_EltreumUI.skins.itemsetcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.itemsetcolor.r, E.db.ElvUI_EltreumUI.skins.itemsetcolor.g, E.db.ElvUI_EltreumUI.skins.itemsetcolor.b = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.itemsetenable or not E.db.ElvUI_EltreumUI.skins.itemquality or not E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats = E.Libs.ACH:Group(L["Stats"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description1 = E.Libs.ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.autoarmorystats = E.Libs.ACH:Toggle(L["Automatically swap the Character Stats to your main ones"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmoryautostats end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmoryautostats = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description2 = E.Libs.ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.statcolors = E.Libs.ACH:Toggle(function() if E.Retail then return L["Add Class Gradient Colors to Stats"] else return L["Add Class Colors to Text"] end end, L["Enable this option"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.statcolors end, function(_, value) E.db.ElvUI_EltreumUI.skins.statcolors = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.othergradientcolors = E.Libs.ACH:Toggle(function() if E.Retail then return L["Add Class Gradient Colors to Other Texts"] else return L["Add Class Gradient Colors to Text"] end end, L["Enable this option"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.characterskingradients end, function(_, value) E.db.ElvUI_EltreumUI.skins.characterskingradients = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description3 = E.Libs.ACH:Description(" ", 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.characterpanelfontsize = E.Libs.ACH:Range(L["Stats Font Size"], nil, 7, { min = 8, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryfontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryfontsize = value ElvUI_EltreumUI:ExpandedCharacterStats() PaperDollFrame_UpdateStats() end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows = E.Libs.ACH:Group(L["Shadows"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description1 = E.Libs.ACH:Description(L["Add Shadows to Frames"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.enable = E.Libs.ACH:Toggle(L["Enable General Shadows"], L["Add Shadows to frames like Player, target, Chats and others"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.enable end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.actionbars = E.Libs.ACH:Toggle(L["ActionBars"], L["Add Shadows to Actionbars"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.actionbars end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.actionbars = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.minimap = E.Libs.ACH:Toggle(_G.MINIMAP_LABEL or L["Minimap"], L["Add Shadows to the Minimap"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.minimap end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.minimap = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.chat = E.Libs.ACH:Toggle(_G.CHAT_LABEL or "Chat", L["Add Shadows to the Chat Frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.chat end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.chat = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.blizzelvui = E.Libs.ACH:Toggle(L["Blizzard/ElvUI"], L["Add Shadows to general Blizzard/ElvUI frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.blizzard end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.blizzard = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.tooltip = E.Libs.ACH:Toggle(L["Tooltip"], L["Add Shadows to Tooltips"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.tooltip end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.tooltip = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.datatexts = E.Libs.ACH:Toggle(L["DataTexts"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.datatexts end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.datatexts = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.unitframes = E.Libs.ACH:Toggle(L["UnitFrames"], L["Add Shadows to the Unitframes"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.unitframes end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.unitframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.raid = E.Libs.ACH:Toggle(L["Raid"], L["Add Shadows to Raid Frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.raid end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.raid = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description2 = E.Libs.ACH:Description(L["Other Shadows (can become CPU/Memory Intensive)"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.nphealth = E.Libs.ACH:Toggle(L["Nameplate Health"], L["Add Shadows to Nameplate Healthbars"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.nameplates end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.nameplates = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npaura = E.Libs.ACH:Toggle(L["Nameplate Aura"], L["Add Shadows to Nameplate Auras"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npauras end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npauras = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npportrait = E.Libs.ACH:Toggle(L["Nameplate Portrait"], L["Add Shadows to Nameplate Portraits"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npportraits end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npportraits = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.nppower = E.Libs.ACH:Toggle(L["Nameplate Power"], L["Add Shadows to Nameplate Powers"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.nppower end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.nppower = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npcastbar = E.Libs.ACH:Toggle(L["Nameplate Castbar"], L["Add Shadows to Nameplate Castbars"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npcastbar end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npcastbar = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.ufaura = E.Libs.ACH:Toggle(L["Unitframe Aura"], L["Add Shadows to Unitframe Auras"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.ufaura end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.ufaura = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.aura = E.Libs.ACH:Toggle(L["Aura"], L["Add Aura Shadows (Aura list next to the minimap)"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.aura end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.aura = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description3 = E.Libs.ACH:Description(L["Shadow Size"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.size = E.Libs.ACH:Range("", nil, 7, { min = 1, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.length end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.length = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description4 = E.Libs.ACH:Description(L["Custom Color"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.classcolors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 9, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.shadow.customcolor or not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.customcolorenable = E.Libs.ACH:Toggle(L["Enable Custom Colors"], nil, 10, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.customcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.shadow.classcolor or not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.customcolor = E.Libs.ACH:Color(L["Custom Color"], nil, 11, true, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.r, E.db.ElvUI_EltreumUI.skins.shadow.g, E.db.ElvUI_EltreumUI.skins.shadow.b, E.db.ElvUI_EltreumUI.skins.shadow.a, P.ElvUI_EltreumUI.skins.shadow.r, P.ElvUI_EltreumUI.skins.shadow.g, P.ElvUI_EltreumUI.skins.shadow.b, P.ElvUI_EltreumUI.skins.shadow.a end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.shadow.r, E.db.ElvUI_EltreumUI.skins.shadow.g, E.db.ElvUI_EltreumUI.skins.shadow.b, E.db.ElvUI_EltreumUI.skins.shadow.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable or not E.db.ElvUI_EltreumUI.skins.shadow.customcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.quests = E.Libs.ACH:Group(L["Quests"], nil, 2, "tab")
	--ElvUI_EltreumUI.Options.args.skins.args.quests.args.objectiveframe = E.Libs.ACH:Group(L["Objective Frame"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description3 = E.Libs.ACH:Description(L["Skin Objective Frame"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.enable = E.Libs.ACH:Toggle(L["Enable Skin"], L["Skin the Objective/Quest Frame"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.quests end, function(_, value) E.db.ElvUI_EltreumUI.skins.quests = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.enableshadow = E.Libs.ACH:Toggle(L["Enable Shadows"], nil, 7, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.lineshadow end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.lineshadow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description4 = E.Libs.ACH:Description(" ", 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.progresstexture = E.Libs.ACH:SharedMediaStatusbar(L["Choose the Progress Bar Texture"], L["Select a Texture"], 9, "full", function() return E.db.ElvUI_EltreumUI.skins.queststatusbartexture end, function(_,key) E.db.ElvUI_EltreumUI.skins.queststatusbartexture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description5 = E.Libs.ACH:Description(L["Line"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linetexture = E.Libs.ACH:SharedMediaStatusbar(L["Line Texture"], L["Select a Texture"], 11, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.questsettings.texture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linex = E.Libs.ACH:Range(L["Line Width"], nil, 12, { min = 1, max = 400, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.sizex end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.sizex = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.liney = E.Libs.ACH:Range(L["Line Height"], nil, 12, { min = 1, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.sizey end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.sizey = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.buttonsize = E.Libs.ACH:Range(L["Button Size"], nil, 13, { min = 4, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.linebuttonsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.linebuttonsize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolorenable = E.Libs.ACH:Toggle(L["Enable Custom Colors"], nil, 14, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolor1 = E.Libs.ACH:Color(L["Custom Color"].."1", nil, 15, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b, 1, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolor2 = E.Libs.ACH:Color(L["Custom Color"].."2", nil, 16, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b, 1, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description6 = E.Libs.ACH:Description(L["Text"], 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolorenable = E.Libs.ACH:Toggle(L["Enable Custom Colors"], nil, 18, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.customcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolor = E.Libs.ACH:Color(L["Custom Color"], nil, 19, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customr, E.db.ElvUI_EltreumUI.skins.questsettings.customg, E.db.ElvUI_EltreumUI.skins.questsettings.customb, 1, P.ElvUI_EltreumUI.skins.questsettings.customr, P.ElvUI_EltreumUI.skins.questsettings.customg, P.ElvUI_EltreumUI.skins.questsettings.customb, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.customr, E.db.ElvUI_EltreumUI.skins.questsettings.customg, E.db.ElvUI_EltreumUI.skins.questsettings.customb = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.customcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.hideDash = E.Libs.ACH:Toggle(L["Hide Dash"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.hideDash end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.hideDash = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.hideCheck = E.Libs.ACH:Toggle(L["Hide Completion Checkmark"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.hideCheck end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.hideCheck = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.headerfontsize = E.Libs.ACH:Range(L["Header Font Size"], nil, 21, { min = 6, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.fontSizeHeader end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings. fontSizeHeader = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.fontsize = E.Libs.ACH:Range(L["Font Size"], nil, 21, { min = 6, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.fontSize end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.fontSize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description7 = E.Libs.ACH:Description(_G.LFG_LIST_TITLE, 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolorenabletitle = E.Libs.ACH:Toggle(L["Enable Custom Colors"], nil, 31, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolortitle = E.Libs.ACH:Color(L["Custom Color"], nil, 32, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customrtitle, E.db.ElvUI_EltreumUI.skins.questsettings.customgtitle, E.db.ElvUI_EltreumUI.skins.questsettings.custombtitle, 1, P.ElvUI_EltreumUI.skins.questsettings.customrtitle, P.ElvUI_EltreumUI.skins.questsettings.customgtitle, P.ElvUI_EltreumUI.skins.questsettings.custombtitle, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.customrtitle, E.db.ElvUI_EltreumUI.skins.questsettings.customgtitle, E.db.ElvUI_EltreumUI.skins.questsettings.custombtitle = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.addons = E.Libs.ACH:Group(L["Addons"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs = E.Libs.ACH:Group("BigWigs", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description1 = E.Libs.ACH:Description("BigWigs", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.enable = E.Libs.ACH:Toggle(L["Skin BigWigs"], L["Add Gradient to BigWigs Bars"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bigwigs end, function(_, value) E.db.ElvUI_EltreumUI.skins.bigwigs = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.shadows = E.Libs.ACH:Toggle(L["Shadows"], L["Add Shadows to BigWigs Bars"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.bigwigs end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.bigwigs = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.enablecustomcolor = E.Libs.ACH:Toggle(L["Custom Color"], L["Enable Custom Colors"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor = value end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description2 = E.Libs.ACH:Description(L["Normal"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.normal1 = E.Libs.ACH:Color(L["Color 1"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomnormalr1 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomnormalg1 local db = P.ElvUI_EltreumUI.skins.bigwigscustomnormalb1 return E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb1 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.normal2 = E.Libs.ACH:Color(L["Color 2"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomnormalr2 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomnormalg2 local db = P.ElvUI_EltreumUI.skins.bigwigscustomnormalb2 return E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb2 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description3 = E.Libs.ACH:Description(L["Emphasize"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.emphasize1 = E.Libs.ACH:Color(L["Color 1"], nil, 9, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1 local db = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1 return E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.emphasize2 = E.Libs.ACH:Color(L["Color 2"], nil, 10, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2 local db = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2 return E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details = E.Libs.ACH:Group("Details", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.description1 = E.Libs.ACH:Description("Details", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.enable = E.Libs.ACH:Toggle(L["Skin Details"], L["Add gradient to Details Bars"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.details end, function(_, value) E.db.ElvUI_EltreumUI.skins.details = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientmode = E.Libs.ACH:Select(L["Gradient Mode"], nil, 3, {
		["DARK"] = L["Dark Mode"],
		["LIGHT"] = L["Light Mode"],
	}, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsmode end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsmode = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientmode.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientname = E.Libs.ACH:Toggle(L["Gradient Name"], L["Add Gradient to Names"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsgradientname end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsgradientname = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientnamefontshadow = E.Libs.ACH:Toggle(L["Font Shadow"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsgradientnameshadow end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsgradientnameshadow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.texture = E.Libs.ACH:Toggle(L["Replace Texture"], L["Replace Details Bar Texture"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailstextureoverwrite end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailstextureoverwrite = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.embed = E.Libs.ACH:Toggle(L["Embed"], L["Simple Right Chat Embed"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsembed end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsembed = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.hide = E.Libs.ACH:Toggle(L["Hide Out of Combat"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsembedooc end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsembedooc = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.detailsembed end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.skin = E.Libs.ACH:Range(L["Out of Combat Delay"], nil, 7, { min = 1, max = 30, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsdelay end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsdelay = value end, function() return not E.db.ElvUI_EltreumUI.skins.detailsembed or not E.db.ElvUI_EltreumUI.skins.detailsembedooc end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons = E.Libs.ACH:Group(L["Other AddOns"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description1 = E.Libs.ACH:Description("BagSync", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.bagsync = E.Libs.ACH:Toggle(L["Skin BagSync"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bagsync end, function(_, value) E.db.ElvUI_EltreumUI.skins.bagsync = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("BagSync") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description2 = E.Libs.ACH:Description("BugSack", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.bugsack = E.Libs.ACH:Toggle(L["Skin BugSack"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bugsack end, function(_, value) E.db.ElvUI_EltreumUI.skins.bugsack = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("BugSack") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description3 = E.Libs.ACH:Description("Clique", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.clique = E.Libs.ACH:Toggle(L["Skin Clique"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.clique end, function(_, value) E.db.ElvUI_EltreumUI.skins.clique = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Clique") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description4 = E.Libs.ACH:Description("Hekili", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.hekili = E.Libs.ACH:Toggle(L["Skin Hekili"], nil, 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.hekili end, function(_, value) E.db.ElvUI_EltreumUI.skins.hekili = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Hekili") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description5 = E.Libs.ACH:Description("Immersion", 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.immersion = E.Libs.ACH:Toggle(L["Skin Immersion"], nil, 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.immersion end, function(_, value) E.db.ElvUI_EltreumUI.skins.immersion = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Immersion") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description6 = E.Libs.ACH:Description("MeetingHorn", 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.meetinghorn = E.Libs.ACH:Toggle(L["Skin MeetingHorn"], nil, 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.meetinghorn end, function(_, value) E.db.ElvUI_EltreumUI.skins.meetinghorn = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("MeetingHorn") end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description7 = E.Libs.ACH:Description("OmniCD", 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.omnicd = E.Libs.ACH:Toggle(L["Skin OmniCD"], nil, 14, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.omnicd end, function(_, value) E.db.ElvUI_EltreumUI.skins.omnicd = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("OmniCD") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.omnicdshadows = E.Libs.ACH:Toggle(E.NewSign..L["Shadows"], nil, 15, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.omnicdshadows end, function(_, value) E.db.ElvUI_EltreumUI.skins.omnicdshadows = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("OmniCD") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description8 = E.Libs.ACH:Description("PallyPower", 115, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.pallypower = E.Libs.ACH:Toggle(L["Skin PallyPower"], nil, 116, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.pallypower end, function(_, value) E.db.ElvUI_EltreumUI.skins.pallypower = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("PallyPower") end, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description9 = E.Libs.ACH:Description("RareScanner", 217, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.rarescanner = E.Libs.ACH:Toggle(L["Skin RareScanner"], nil, 218, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.rarescanner end, function(_, value) E.db.ElvUI_EltreumUI.skins.rarescanner = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("RareScanner") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description10 = E.Libs.ACH:Description("SimulationCraft", 319, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.simc = E.Libs.ACH:Toggle(L["Skin SimulationCraft"], nil, 320, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.simulationcraft end, function(_, value) E.db.ElvUI_EltreumUI.skins.simulationcraft = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("SimulationCraft") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description11 = E.Libs.ACH:Description("WarpDeplete", 421, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.WarpDeplete = E.Libs.ACH:Toggle(L["Skin WarpDeplete"], nil, 422, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.warpdeplete end, function(_, value) E.db.ElvUI_EltreumUI.skins.warpdeplete = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("WarpDeplete") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description12 = E.Libs.ACH:Description("Cell", 523, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.cell = E.Libs.ACH:Toggle(L["Skin Cell"], nil, 524, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.cell end, function(_, value) E.db.ElvUI_EltreumUI.skins.cell = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Cell") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.cellhealthloss = E.Libs.ACH:Toggle(L["Gradient Health Loss"], nil, 525, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.cellhealthloss end, function(_, value) E.db.ElvUI_EltreumUI.skins.cellhealthloss = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Cell") or not E.db.ElvUI_EltreumUI.skins.cell end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description13 = E.Libs.ACH:Description("Deadly Boss Mods", 626, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.dbm = E.Libs.ACH:Toggle(L["Skin DBM"], nil, 627, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.dbm end, function(_, value) E.db.ElvUI_EltreumUI.skins.dbm = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("DBM-Core") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description14 = E.Libs.ACH:Description("Auctionator", 728, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.auctionator = E.Libs.ACH:Toggle(L["Skin Auctionator"], nil, 729, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.auctionator end, function(_, value) E.db.ElvUI_EltreumUI.skins.auctionator = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Auctionator") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description15 = E.Libs.ACH:Description("WeakAuras Options", 830, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.weakaurasoptions = E.Libs.ACH:Toggle(L["Skin"].." WeakAuras Options", nil, 831, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.weakaurasoptions end, function(_, value) E.db.ElvUI_EltreumUI.skins.weakaurasoptions = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("WeakAuras") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui = E.Libs.ACH:Group("ElvUI", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description1 = E.Libs.ACH:Description(L["Skin ElvUI"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enable = E.Libs.ACH:Toggle(L["Add a texture to ElvUI Backgrounds"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enableuf = E.Libs.ACH:Toggle(L["Enable on Unitframes"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.unitframes end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.unitframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enablenp = E.Libs.ACH:Toggle(L["Enable on Nameplate"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.nameplates end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.nameplates = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enablebuttons = E.Libs.ACH:Toggle(L["Enable on Buttons"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.button end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.button = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description2 = E.Libs.ACH:Description(L["Colors"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.classcolors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.color = E.Libs.ACH:Color(L["Custom Color"], nil, 6, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.elvui.color.r local dg = P.ElvUI_EltreumUI.skins.elvui.color.g local db = P.ElvUI_EltreumUI.skins.elvui.color.b local da = P.ElvUI_EltreumUI.skins.elvui.color.a return E.db.ElvUI_EltreumUI.skins.elvui.color.r, E.db.ElvUI_EltreumUI.skins.elvui.color.g, E.db.ElvUI_EltreumUI.skins.elvui.color.b, E.db.ElvUI_EltreumUI.skins.elvui.color.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.elvui.color.r, E.db.ElvUI_EltreumUI.skins.elvui.color.g, E.db.ElvUI_EltreumUI.skins.elvui.color.b, E.db.ElvUI_EltreumUI.skins.elvui.color.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate or E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description3 = E.Libs.ACH:Description(L["Texture"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.texture = E.Libs.ACH:SharedMediaBackground(" ", L["Select a Texture"], 8, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.elvui.texture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3 = E.Libs.ACH:Group("", nil, 40, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description0 = E.Libs.ACH:Description("Ace3", 41, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.enable = E.Libs.ACH:Toggle(L["Enable Ace3 Skin"], nil, 42, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.enable end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.Texture = E.Libs.ACH:SharedMediaStatusbar(L["Button Hover Texture"], L["Select a Texture"], 44, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.ace3.texture = key end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.fadeTime = E.Libs.ACH:Range(L["Fade Out Time"], nil, 43, { min = 0, max = 2, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.fadetime end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.fadetime = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description1 = E.Libs.ACH:Description(L["Button Hover"], 49, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonHovercolorClassColors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 50, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonHovercolor = E.Libs.ACH:Color(L["Custom Color"], nil, 51, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r local dg = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g local db = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b local da = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a return E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description2 = E.Libs.ACH:Description(L["Button Disabled"], 59, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonDisabledcolorClassColors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 60, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonDisabledcolor = E.Libs.ACH:Color(L["Custom Color"], nil, 61, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.button.disabled.r local dg = P.ElvUI_EltreumUI.skins.ace3.button.disabled.g local db = P.ElvUI_EltreumUI.skins.ace3.button.disabled.b local da = P.ElvUI_EltreumUI.skins.ace3.button.disabled.a return E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.r, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.g, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.b, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.r, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.g, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.b, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description3 = E.Libs.ACH:Description(L["Text Selected"], 69, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextSelectedcolorClassColors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 70, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextSelectedcolor = E.Libs.ACH:Color(L["Custom Color"], nil, 71, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r local dg = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g local db = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.a, dr, dg, db end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description4 = E.Libs.ACH:Description(L["Text Enabled"], 79, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextEnabledcolorClassColors = E.Libs.ACH:Toggle(L["Use Class Colors"], nil, 80, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextEnabledcolor = E.Libs.ACH:Color(L["Custom Color"], nil, 81, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r local dg = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g local db = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.a, dr, dg, db end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip = E.Libs.ACH:Group(L["Tooltip"], nil, 2, "tab", nil, nil, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip.args.description2 = E.Libs.ACH:Description(L["Item Level on Tooltip"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip.args.tooltipilvl = E.Libs.ACH:Toggle(L["Enable"], L["Shows Item Level on Tooltips"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltooltip end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltooltip = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars = E.Libs.ACH:Group(L["DataBars"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology = E.Libs.ACH:Group(L["Archeology"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.width = E.Libs.ACH:Range(L["Width"], nil, 2, { min = 10, max = 600, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.sizex end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.sizex = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.height = E.Libs.ACH:Range(L["Height"], nil, 2, { min = 10, max = 400, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.sizey end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.sizey = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.description2 = E.Libs.ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fontsize = E.Libs.ACH:Range(L["Font Size"], nil, 6, { min = 4, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontsize end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontsize = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fontx = E.Libs.ACH:Range(L["Text X offset"], nil, 7, { min = -100, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsetx end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsetx = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fonty = E.Libs.ACH:Range(L["Text Y offset"], nil, 7, { min = -100, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsety end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsety = value E:StaticPopup_Show('CONFIG_RL') end)
end
