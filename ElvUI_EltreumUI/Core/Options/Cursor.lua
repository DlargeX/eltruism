local E, _, _, P = unpack(ElvUI)
local L = E.Libs.ACL:GetLocale('ElvUI', E.global.general.locale)
local _G = _G
local GetCVar = _G.C_CVar and _G.C_CVar.GetCVar or _G.GetCVar
local SetCVar = _G.C_CVar and _G.C_CVar.SetCVar or _G.SetCVar

-- Eltruism cursor options
function ElvUI_EltreumUI:CursorOptions()
	ElvUI_EltreumUI.Options.args.cursor = E.Libs.ACH:Group(E:TextGradient(L["Cursor"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Attach Rings to the Cursor that will show Castbars, GCDs and can also show the cooldown of skills you attempt to use"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.cursor.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\cursor'
	ElvUI_EltreumUI.Options.args.cursor.args.general = E.Libs.ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description1 = E.Libs.ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enable = E.Libs.ACH:Toggle(L["Enable cursor rings for Casts, GCD and Combat"], L["Add a rings around the mouse cursor for GCD, casts and combat"], 2, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.enable end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.enable = value end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecombatonly = E.Libs.ACH:Toggle(L["Enable cursor only during combat"], L["Cursor will only show during combat"], 3, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.combat end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.combat = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecd = E.Libs.ACH:Toggle(L["Enable cooldown tracking"], L["Add a cooldown icon when trying to use skills that are on cooldown, and a cooldown flash when they are ready"], 4, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldown = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablepetcd = E.Libs.ACH:Toggle(L["Enable pet cooldown tracking"], L["Add a cooldown icon when trying to use skills that are on cooldown, and a cooldown flash when they are ready"], 5, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.petcooldown end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.petcooldown = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description2 = E.Libs.ACH:Description(L["Cooldown Sound"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecdsound = E.Libs.ACH:Toggle(L["Play a Sound when attempting to use a skill that is on cooldown."], nil, 7, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound = value if value == true then SetCVar('Sound_EnableErrorSpeech', 0) else SetCVar('Sound_EnableErrorSpeech', 1) end E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.cdsound = E.Libs.ACH:SharedMediaSound(L["Select a Sound"], L["Choose a Sound from SharedMedia files"], 8, "double", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownfile end, function(_,key) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownfile = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description3 = E.Libs.ACH:Description(L["Change the size of the World of Warcraft Cursor"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.setsize = E.Libs.ACH:Select(L["Select a size"], L["Choose this size"], 10, {
		["-1"] = L["Autodetect"],
		["0"] = '32x32',
		["1"] = '48x48',
		["2"] = '64x64',
		["3"] = '128x128',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursor.size end, function(_, value) ElvUI_EltreumUI:CursorSize(value) end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.setsize.style = "radio"
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description4 = E.Libs.ACH:Description(L["Attempt to fix Cursor Lag"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.fixlag = E.Libs.ACH:Select(" ", L["Software cursor is how the cursor was before Battle for Azeroth, Hardware cursor is faster but will cause problems with addons that attach to it"], 12, {
		["0"] = L["Software Cursor"],
		["1"] = L["Hardware Cursor"],
	}, false, nil, function() return GetCVar('HardwareCursor') end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.fixlag = value SetCVar('HardwareCursor', value) end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.fixlag.style = "radio"
	ElvUI_EltreumUI.Options.args.cursor.args.size = E.Libs.ACH:Group(L["Cursor Sizes"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.description1 = E.Libs.ACH:Description(L["Cursor Sizes"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.castradius = E.Libs.ACH:Range(L["Cast Radius (Default: 25)"], L["Set the radius of the cast cursor"], 2, { min = 10, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.castthickness = E.Libs.ACH:Range(L["Cast Thickness (Default: 5)"], L["Set the radius of the cast cursor"], 3, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.gcdradius = E.Libs.ACH:Range(L["GCD Radius (Default: 20)"], L["Set the radius of the gcd cursor"], 4, { min = 10, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.gcdthickness = E.Libs.ACH:Range(L["GCD Thickness (Default: 5)"], L["Set the thickness of the gcd cursor"], 5, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.cursorcursorradius = E.Libs.ACH:Range(L["Combat Cursor Radius (Default: 15)"], L["Set the radius of the combat cursor"], 6, { min = 1, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.cursorcursorthickness = E.Libs.ACH:Range(L["Combat Cursor Thickness (Default: 5)"], L["Set the thickness of the combat cursor"], 7, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.position = E.Libs.ACH:Group(L["Cursor Position"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.description1 = E.Libs.ACH:Description(L["Cursor Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.coooldownx = E.Libs.ACH:Range(L["Set X Offset"], nil, 2, { min = -200, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsetx end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsetx = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.coooldowny = E.Libs.ACH:Range(L["Set Y Offset"], nil, 2, { min = -200, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsety end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsety = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors = E.Libs.ACH:Group(L["Cursor Colors"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description1 = E.Libs.ACH:Description(L["Cursor Colors"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castclasscolor = E.Libs.ACH:Toggle(L["Class Colored Casts"], L["Use Class Colors for Cast"], 2, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castcolor = E.Libs.ACH:Color(L["Custom Color Cast"], nil, 3, true, nil, function()
		local cursorcast = E.db.ElvUI_EltreumUI.cursors.cursorcast
		local d = P.ElvUI_EltreumUI.cursors.cursorcast
		return cursorcast.r, cursorcast.g, cursorcast.b, cursorcast.a, d.r, d.g, d.b, d.a
	end,
		function(_, r, g, b, a)
			local cursorcast = E.db.ElvUI_EltreumUI.cursors.cursorcast
			cursorcast.r, cursorcast.g, cursorcast.b, cursorcast.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
		end, function() return (not E.db.ElvUI_EltreumUI.cursors.cursor.enable) or E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.gradient = E.Libs.ACH:Toggle(L["Gradient"], nil, 4, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.gradient end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.gradient = value ElvUI_EltreumUI:CastCursor() end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description2 = E.Libs.ACH:Description(" ", 5, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castclassgcd = E.Libs.ACH:Toggle(L["Class Colored GCD"], L["Use Class Colors for GCD"], 6, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.colorgcd = E.Libs.ACH:Color(L["Custom Color GCD"], nil, 7, true, nil, function()
		local cursorgcd = E.db.ElvUI_EltreumUI.cursors.cursorgcd
		local d = P.ElvUI_EltreumUI.cursors.cursorgcd
		return cursorgcd.r, cursorgcd.g, cursorgcd.b, cursorgcd.a, d.r, d.g, d.b, d.a
	end,
		function(_, r, g, b, a)
			local cursorgcd = E.db.ElvUI_EltreumUI.cursors.cursorgcd
			cursorgcd.r, cursorgcd.g, cursorgcd.b, cursorgcd.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
		end, function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor or (not E.db.ElvUI_EltreumUI.cursors.cursor.enable ) end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description3 = E.Libs.ACH:Description(" ", 8, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.cursorcursorclasscolor = E.Libs.ACH:Toggle(L["Class Colored Combat"], L["Use Class Colors for Cursor"], 9, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.cursorcursorcolor = E.Libs.ACH:Color(L["Custom Color Combat"], nil, 10, true, nil, function()
		local cursorcursor = E.db.ElvUI_EltreumUI.cursors.cursorcursor
		local d = P.ElvUI_EltreumUI.cursors.cursorcursor
		return cursorcursor.r, cursorcursor.g, cursorcursor.b, cursorcursor.a, d.r, d.g, d.b, d.a
	end,
		function(_, r, g, b, a)
			local cursorcursor = E.db.ElvUI_EltreumUI.cursors.cursorcursor
			cursorcursor.r, cursorcursor.g, cursorcursor.b, cursorcursor.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
		end, function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor or (not E.db.ElvUI_EltreumUI.cursors.cursor.enable) end)
	ElvUI_EltreumUI.Options.args.cursor.args.texture = E.Libs.ACH:Group(L["Cursor Type"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.description1 = E.Libs.ACH:Description(L["Choose a type of cursor by clicking it"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.description2 = E.Libs.ACH:Description(function() return L["Currently selected cursor: "]..ElvUI_EltreumUI:CurrentTypeofCursor() end, 2, L["Choose a type of cursor by clicking it"], nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring1 = E.Libs.ACH:Execute(L["Type 1"], L["The Cursor will use this type as its texture"], 3, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring1.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring1')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring2 = E.Libs.ACH:Execute(L["Type 2"], L["The Cursor will use this type as its texture"], 4, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring2.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring2')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring3 = E.Libs.ACH:Execute(L["Type 3"], L["The Cursor will use this type as its texture"], 5, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring3.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring3')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring4 = E.Libs.ACH:Execute(L["Type 4"], L["The Cursor will use this type as its texture"], 6, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring4.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring4')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring5 = E.Libs.ACH:Execute(L["Type 5"], L["The Cursor will use this type as its texture"], 7, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring5.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring5')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring6 = E.Libs.ACH:Execute(L["Type 6"], L["The Cursor will use this type as its texture"], 8, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring6.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring6')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring7 = E.Libs.ACH:Execute(L["Type 7"], L["The Cursor will use this type as its texture"], 9, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring7.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring7')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring8 = E.Libs.ACH:Execute(L["Type 8"], L["The Cursor will use this type as its texture"], 10, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring8.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring8')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring9 = E.Libs.ACH:Execute(L["Type 9"], L["The Cursor will use this type as its texture"], 11, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring9.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring9')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring10 = E.Libs.ACH:Execute(L["Type 10"], L["The Cursor will use this type as its texture"], 12, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring10.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring10')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring11 = E.Libs.ACH:Execute(L["Type 11"], L["The Cursor will use this type as its texture"], 13, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring11.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring11')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring12 = E.Libs.ACH:Execute(L["Type 12"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring12.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring12')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring13 = E.Libs.ACH:Execute(L["Type 13"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring13.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring13')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring14 = E.Libs.ACH:Execute(L["Type 14"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring14.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring14')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring15 = E.Libs.ACH:Execute(L["Type 15"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring15.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring15')
end
