local E, _, _, P = unpack(ElvUI)
local L = E.Libs.ACL:GetLocale('ElvUI', E.global.general.locale)
local _G = _G

-- Eltruism nameplate options
function ElvUI_EltreumUI:NameplateOptions()
	ElvUI_EltreumUI.Options.args.nameplates = E.Libs.ACH:Group(E:TextGradient(L["Nameplates"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Enhance ElvUI Nameplates with options for gradient, size, textures, models, behavior and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.nameplates.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\nameplate'
	ElvUI_EltreumUI.Options.args.nameplates.args.general = E.Libs.ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description1 = E.Libs.ACH:Description(L["Smart Classbar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classbarautohide = E.Libs.ACH:Toggle(L["Enable Smart Classbar"], L["Automatically hide the Classbar if the Target is Friendly, show if it is an enemy"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.classbarautohide end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.classbarautohide = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description2 = E.Libs.ACH:Description(L["Hide Cooldown Swipe"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.hidecdswipenp = E.Libs.ACH:Toggle(L["Hide Cooldown Swipe on Buffs and Debuffs"], L["Toggle On and Off"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideSwipe end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideSwipe = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description3 = E.Libs.ACH:Description(L["Hide Debuffs on Non Target"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.hidenontargetdebuffs = E.Libs.ACH:Toggle(L["Hide Debuffs on Non Targeted Nameplates, show when Targeted"], L["Toggle On and Off"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hidedebuffsnontarget end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hidedebuffsnontarget = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description4 = E.Libs.ACH:Description(L["Hide Auras"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.hideaurasnoncombat = E.Libs.ACH:Toggle(L["Hide Auras on Nameplates that are not in Combat"], L["Toggle On and Off"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideaurasnoncombat end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideaurasnoncombat = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description5 = E.Libs.ACH:Description(L["Enemy Nameplate Level"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.dynamiclevel = E.Libs.ACH:Toggle(L["Hide level on enemy nameplates when you are max level"], L["Toggle On and Off"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatelevel end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatelevel = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description6 = E.Libs.ACH:Description(L["Automatically Hide NPC Names"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.hidenpcname = E.Libs.ACH:Toggle(L["Hide NPC Names when they are too far away to have Nameplates"], L["Toggle On and Off"], 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.cvars.autohidenpcname end, function(_, value) E.db.ElvUI_EltreumUI.cvars.autohidenpcname = value end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description7 = E.Libs.ACH:Description(L["Rested Nameplates"], 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.restednp = E.Libs.ACH:Toggle(L["Decrease Nameplate Overlap when Resting"], L["Toggle On and Off"], 14, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.restedoverlap end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.restedoverlap = value end, not E.private.nameplates.enable)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description8 = E.Libs.ACH:Description(L["Restore Hidden Names"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.restorenames = E.Libs.ACH:Execute(function() if E.Retail then return L["Restore Unit Names hidden by Hide NPC Names"] else return L["Restore Unit Names Hidden during install"] end end, function() if E.Retail then return L["Use this button to restore names should you have disabled the Hide NPC Names option"] else return L["Use this button to restore names"] end end, 16, function() ElvUI_EltreumUI:RestoreNameplateNames() end, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.description9 = E.Libs.ACH:Description(" ", 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.nameplaterefreshdebufffilter = E.Libs.ACH:Execute(L["Manage Debuff Style Filter"], L["Add debuffs to the Style Filter to make Nameplates with expiring Debuffs show full alpha and scale"], 18, function() local C = unpack(E.Config) C:StyleFilterSetConfig("EltreumRefreshDebuff") E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'nameplates', "stylefilters", "triggers", "debuffs") end, nil, false, "full", nil, nil, function() return not E.global["nameplates"]["filters"]["EltreumRefreshDebuff"] end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture = E.Libs.ACH:Group(L["Class Textures"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.description1 = E.Libs.ACH:Description(L["Class Colored Nameplate Options"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.classhover = E.Libs.ACH:Toggle(L["Hover"], L["Change the color of the hover to be class colored"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassColorGlow end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassColorGlow = value ElvUI_EltreumUI:SetStyleFilters() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.classborder = E.Libs.ACH:Toggle(L["Border"], L["Change the color of the border glow to be class bordered in nameplates"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassBorderNameplate end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassBorderNameplate = value ElvUI_EltreumUI:SetStyleFilters() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.classtexture = E.Libs.ACH:Toggle(L["Player Class Texture"], L["Change the texture of the nameplate to be a class gradient of the player's class"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture = value ElvUI_EltreumUI:SetStyleFilters() end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.targetclasstexture = E.Libs.ACH:Toggle(L["Target Class Texture"], L["Change the texture of the nameplate to be a class gradient of the target's class"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture = value ElvUI_EltreumUI:SetStyleFilters() end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.description2 = E.Libs.ACH:Description(L["Nameplate Texture Version"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.textureselect = E.Libs.ACH:Select(" ", nil, 7, { ["V1"] = L["Version 1"], ["V2"] = L["Version 2"], ["V3"] = L["Version 3"], ["NONE"] = L["None"], }, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.nptextureversion end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nptextureversion = value end, function() return (not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classtexture.args.textureselect.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.height = E.Libs.ACH:Group(L["Health Height"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.description1 = E.Libs.ACH:Description(L["Custom Health Height"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.enableCustomHealthHeight = E.Libs.ACH:Toggle(L["Enable Custom Health Heights"], L["Changes Nameplate Health Height depending on conditions"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.enableCustomHealthHeightelvui = E.Libs.ACH:Toggle(L["Use ElvUI Health Heights"], L["Use ElvUI Nameplate Health Heights when targeted or in combat"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.enableCustomHealthHeightnocombat = E.Libs.ACH:Range(L["Out of Combat/Not Targeted"], L["Choose the Health Height for Nameplates not in combat or not targeted"], 4, { min = 1, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.outofcombatHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.outofcombatHeight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.enableCustomHealthHeightincombat = E.Libs.ACH:Range(L["In Combat/Targeted"], L["Choose the Health Height for Nameplates that are in combat or targeted"], 5, { min = 1, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.incombatHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.incombatHeight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.height.args.disableCombatConditions = E.Libs.ACH:Toggle(L["Disable Combat Conditions"], L["Disables the in combat and out of combat conditions, keeping only the target/non-target function"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.disableCombatConditions end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.disableCombatConditions = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop = E.Libs.ACH:Group(E.NewSign..L["Backdrop"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.description1 = E.Libs.ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.backdropenable = E.Libs.ACH:Toggle(L["Enable Backdrop Modifications"], nil, 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.nameplates.backdrop.BDmodifications end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.backdrop.BDmodifications = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.description2 = E.Libs.ACH:Description(" ", 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.hide = E.Libs.ACH:Toggle(L["Hide Backdrop"], L["Sets the Backdrop as Transparent/Hidden"], 5, nil, false,'full', function() return E.db.ElvUI_EltreumUI.nameplates.backdrop.backdrophidden end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.backdrop.backdrophidden = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.nameplates.backdrop.BDmodifications end)
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.description3 = E.Libs.ACH:Description(" ", 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.texture = E.Libs.ACH:SharedMediaStatusbar(L["Backdrop Texture"], L["Select a Texture"], 7, "full", function() return E.db.ElvUI_EltreumUI.nameplates.backdrop.backdroptexture end, function(_,key) E.db.ElvUI_EltreumUI.nameplates.backdrop.backdroptexture = key end, function() return not E.db.ElvUI_EltreumUI.nameplates.backdrop.BDmodifications end)
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.staticbackdropdesc = E.Libs.ACH:Description(L["Backdrop Texture Behavior"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.backdrop.args.staticbackdrop = E.Libs.ACH:Toggle(L["Enable static backdrop texture size"], L["Backdrop Texture will not adjust to the missing health"], 9, nil, false,'full', function() return E.db.ElvUI_EltreumUI.nameplates.backdrop.backdroptexturestaticsize end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.backdrop.backdroptexturestaticsize = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.backdrop.BDmodifications end)
	ElvUI_EltreumUI.Options.args.nameplates.args.aura = E.Libs.ACH:Group(L["Aura Text"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.aura.args.description1 = E.Libs.ACH:Description(L["Adjust Aura Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.aura.args.npauraposenable = E.Libs.ACH:Toggle(L["Enable"], L["Adjust the position of the text on Buffs/Debuffs"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.enable end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.aura.args.npaurahorizontaloffset = E.Libs.ACH:Range(L["X-Offset"], nil, 3, { min = 0, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.xOffset end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.xOffset = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.auras.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.aura.args.npauraverticaloffset = E.Libs.ACH:Range(L["Y-Offset"], nil, 4, { min = 0, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.yOffset end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.yOffset = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.auras.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp = E.Libs.ACH:Group(L["Friendly Nameplates"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.description1 = E.Libs.ACH:Description(L["Control how Blizzard Friendly Nameplates behave"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.hidehealthinsideinstances = E.Libs.ACH:Toggle(L["Show Blizzard Friendly Nameplates but Hide Healthbar"], L["Show Blizzard Friendly Nameplates but Hide Healthbar"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.nofriendlyinstances = E.Libs.ACH:Toggle(L["Hide Blizzard Friendly Nameplates inside Instances"], L["Hide Blizzard Friendly Nameplates inside Instances"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.dontshowfriendlyatall = E.Libs.ACH:Toggle(L["Hide Blizzard Friendly Nameplates everywhere"], L["Hide Blizzard Friendly Nameplates everywhere"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.description2 = E.Libs.ACH:Description("", 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.disableFriendlyClick = E.Libs.ACH:Toggle(L["Disable Mouse Interaction"], L["Disable clicking on Friendly Nameplates inside Instances"], 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.disableFriendlyClick end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.disableFriendlyClick = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.customizeFriendlySize = E.Libs.ACH:Toggle(L["Customize Friendly Healthbar Width"], L["Change the Healthbar Width on Friendly Nameplates inside Instances"], 21, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.customizeFriendlySize end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.customizeFriendlySize = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.friendlynp.args.customizeFriendlySizeX = E.Libs.ACH:Range(L["Width"], nil, 22, { min = 1, max = 300, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.customizeFriendlySizeX end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.customizeFriendlySizeX = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.customizeFriendlySize end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar = E.Libs.ACH:Group(L["Nameplate Power Bar"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.description1 = E.Libs.ACH:Description(L["Nameplate Power Bar"], 1, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.enablepowerbar = E.Libs.ACH:Toggle(L["Enable Nameplate Power Bar"], L["Enable an extra Power Bar on Nameplates for missing powers"], 2, nil, false, "full", function() return E.private.ElvUI_EltreumUI.nameplatepower.enable end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.enable = value E:StaticPopup_Show('PRIVATE_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.enableadjust = E.Libs.ACH:Toggle(L["Enable Auto-adjusting Buffs/Debuffs"], L["Enable Auto-adjusting the position of Buffs/Debuffs"], 3, nil, false, "full", function() return E.private.ElvUI_EltreumUI.nameplatepower.adjust end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.adjust = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position = E.Libs.ACH:Group(L["Position"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.description1 = E.Libs.ACH:Description(L["Nameplate Powerbar Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.enableautoadjust = E.Libs.ACH:Toggle(L["Enable Auto-adjusting the Vertical Position of the Power Bar"], L["Power Bar will move automatically based on class/spec/druid form"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.powerbarYoffset = E.Libs.ACH:Range(L["Select the Y Offset for the Power Bar (Default 16)"], L["Set Y Offset"], 3, { min = -100, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.posy end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.posy = value end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size = E.Libs.ACH:Group(L["Size"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.description1 = E.Libs.ACH:Description(L["Nameplate Powerbar Size"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.powerbarsizeX = E.Libs.ACH:Range(L["Select the Horizontal Size of the Power Bar (Default 132)"], L["Set Horizontal Size"], 2, { min = 10, max = 300, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizex end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizex = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.powerbarsizeY = E.Libs.ACH:Range(L["Select the Vertical Size of the Power Bar (Default 6)"], L["Set Vertical Size"], 2, { min = 2, max = 20, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizey end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizey = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types = E.Libs.ACH:Group(L["Types"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.description1 = E.Libs.ACH:Description(L["Select the power types to be displayed:"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.mana = E.Libs.ACH:Toggle(_G.MANA or "Mana", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.mana end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.mana = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.rage = E.Libs.ACH:Toggle(_G.RAGE or "Rage", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.rage end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.rage = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.energy = E.Libs.ACH:Toggle(_G.ENERGY or "Energy", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.energy end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.energy = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.astral = E.Libs.ACH:Toggle(_G.POWER_TYPE_LUNAR_POWER or "Lunar", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.astral end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.astral = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.runic = E.Libs.ACH:Toggle(_G.RUNIC_POWER or "Runic", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.runic end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.runic = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.insanity = E.Libs.ACH:Toggle(_G.INSANITY_POWER or "Insanity", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.insanity end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.insanity = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.maelstrom = E.Libs.ACH:Toggle(_G.POWER_TYPE_MAELSTROM or "Maelstrom", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.maelstrom end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.maelstrom = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.fury = E.Libs.ACH:Toggle(_G.POWER_TYPE_FURY or "Fury", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.fury end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.fury = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.focus = E.Libs.ACH:Toggle(_G.POWER_TYPE_FOCUS or "", nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.focus end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.focus = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance = E.Libs.ACH:Group(L["Appearance"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.description1 = E.Libs.ACH:Description(L["Nameplate Powerbar Appearance"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.font = E.Libs.ACH:SharedMediaFont(L["Font"], L["Choose a font for the Nameplate Powerbar Text"], 2, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.font end, function(_,fontvalue) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.font = fontvalue end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.fontsize = E.Libs.ACH:Range(L["Font Size"], L["Nameplate Powerbar Font Size"], 3, { min = 4, max = 64, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.fontsize end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.fontsize = _G.tonumber(value) end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.bgcolor = E.Libs.ACH:Color(L["Background Color"], nil, 4, true, "full", function() local customcolorpowerbar = E.db.ElvUI_EltreumUI.nameplates.nameplatepower local d = P.ElvUI_EltreumUI.nameplates.nameplatepower return customcolorpowerbar.r, customcolorpowerbar.g, customcolorpowerbar.b, customcolorpowerbar.a, d.r, d.g, d.b, d.a end, function(_, r, g, b, a) local customcolorpowerbar = E.db.ElvUI_EltreumUI.nameplates.nameplatepower customcolorpowerbar.r, customcolorpowerbar.g, customcolorpowerbar.b, customcolorpowerbar.a = r, g, b, a end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.texture = E.Libs.ACH:SharedMediaStatusbar(L["Choose the Power Bar Texture"], L["Select a Texture"], 5, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.texture end, function(_,key) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.texture = key end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.modeleffect = E.Libs.ACH:Toggle(L["Effect"], L["Add an Effect"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.modeleffect end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.modeleffect = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.gradient = E.Libs.ACH:Toggle(L["Gradient"], L["Gradient Colors"], 7, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.gradient end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.gradient = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.gradientcolors = E.Libs.ACH:Execute(L["Colors"], L["Customize Colors"], 8, function() if not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable then E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'unitframe','allColorsGroup','classResourceGroup') else E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'ElvUI_EltreumUI', "gradient", "power") end end, nil, false, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model = E.Libs.ACH:Group(L["Target Model"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.description1 = E.Libs.ACH:Description(L["Target Model"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.enable = E.Libs.ACH:Toggle(L["Enable Target Model"], L["Shows the target's model on the target nameplate"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.pause = E.Libs.ACH:Toggle(L["Pause"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.paused end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.paused = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.description2 = E.Libs.ACH:Description(" ", 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.CamDistance = E.Libs.ACH:Range(L["Camera Distance Scale"], nil, 5, { min = 0.01, max = 10, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.CamDistanceScale end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.CamDistanceScale = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.ViewTranslationx = E.Libs.ACH:Range(L["X-Offset"], nil, 6, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationx end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationx = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.ViewTranslationy = E.Libs.ACH:Range(L["Y-Offset"], nil, 6, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationy end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationy = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.Rotation = E.Libs.ACH:Range(L["Model Rotation"], nil, 7, { min = 0, max = 360, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.Rotation end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.Rotation = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.alpha = E.Libs.ACH:Range(L["Model Alpha"], nil, 7, { min = 0, max = 1, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.modelalpha end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.modelalpha = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.desaturation = E.Libs.ACH:Range(L["Desaturate"], nil, 7, { min = 0, max = 1, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.desaturation end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.desaturation = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification = E.Libs.ACH:Group(L["Classification"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.description1 = E.Libs.ACH:Description(L["Custom Icons"], 1)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.enable = E.Libs.ACH:Toggle(L["Enable replacing Elite/Rare Icons"].." - |cffFF0000"..L["Requires ElvUI Nameplate Elite Icon"].."|r", L["Adds different Rare/Elite Icons"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.enable end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.enable = value ElvUI_EltreumUI:NPClassificatioNIcon() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss = E.Libs.ACH:Group(L["Boss"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.description1 = E.Libs.ACH:Description(L["Boss"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.color = E.Libs.ACH:Color(L["Boss Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.bossR, E.db.ElvUI_EltreumUI.nameplates.classification.bossG, E.db.ElvUI_EltreumUI.nameplates.classification.bossB, 1, P.ElvUI_EltreumUI.nameplates.classification.bossR, P.ElvUI_EltreumUI.nameplates.classification.bossG, P.ElvUI_EltreumUI.nameplates.classification.bossB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.bossR, E.db.ElvUI_EltreumUI.nameplates.classification.bossG, E.db.ElvUI_EltreumUI.nameplates.classification.bossB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.select = E.Libs.ACH:Select(L["Boss Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite = E.Libs.ACH:Group(L["Elite"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.description1 = E.Libs.ACH:Description(L["Elite"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.color = E.Libs.ACH:Color(L["Elite Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.eliteR, E.db.ElvUI_EltreumUI.nameplates.classification.eliteG, E.db.ElvUI_EltreumUI.nameplates.classification.eliteB, 1, P.ElvUI_EltreumUI.nameplates.classification.eliteR, P.ElvUI_EltreumUI.nameplates.classification.eliteG, P.ElvUI_EltreumUI.nameplates.classification.eliteB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.eliteR, E.db.ElvUI_EltreumUI.nameplates.classification.eliteG, E.db.ElvUI_EltreumUI.nameplates.classification.eliteB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.select = E.Libs.ACH:Select(L["Elite Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare = E.Libs.ACH:Group(L["Rare"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.description1 = E.Libs.ACH:Description(L["Rare"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.color = E.Libs.ACH:Color(L["Rare Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.rareR, E.db.ElvUI_EltreumUI.nameplates.classification.rareG, E.db.ElvUI_EltreumUI.nameplates.classification.rareB, 1, P.ElvUI_EltreumUI.nameplates.classification.rareR, P.ElvUI_EltreumUI.nameplates.classification.rareG, P.ElvUI_EltreumUI.nameplates.classification.rareB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.rareR, E.db.ElvUI_EltreumUI.nameplates.classification.rareG, E.db.ElvUI_EltreumUI.nameplates.classification.rareB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.select = E.Libs.ACH:Select(L["Rare Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite = E.Libs.ACH:Group(L["Rare Elite"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.description1 = E.Libs.ACH:Description(L["Rare Elite"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.color = E.Libs.ACH:Color(L["Rare Elite Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteR, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteG, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteB, 1, P.ElvUI_EltreumUI.nameplates.classification.rareeliteR, P.ElvUI_EltreumUI.nameplates.classification.rareeliteG, P.ElvUI_EltreumUI.nameplates.classification.rareeliteB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteR, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteG, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.select = E.Libs.ACH:Select(L["Rare Elite Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom = E.Libs.ACH:Group(L["CUSTOM"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.description1 = E.Libs.ACH:Description(L["Custom Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.description2 = E.Libs.ACH:Description(L["Name of file inside Interface\\Addons"], 2, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.bossicon = E.Libs.ACH:Input(L["Boss"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customboss end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customboss = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.eliteicon = E.Libs.ACH:Input(L["Elite"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customelite end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.rareicon = E.Libs.ACH:Input(L["Rare"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customrare end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customrare = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.rareeliteicon = E.Libs.ACH:Input(L["Rare Elite"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customrareelite end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customrareelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite ~= 'CUSTOM' end)
end
